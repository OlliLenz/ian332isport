/*
  Copyright (c) 2015 Ian R. Haynes.  All right reserved.

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
#ifndef IbusGlobals_h
#define IbusGlobals_h
#include <Arduino.h>

// Comment line to disable debug messages
//#define IBUS_DEBUG
//#define DISCARDED_DEBUG
//#define BAD_DEBUG
//#define RX_DEBUG
//#define TX_DEBUG

// These tell the library which interface you're using. Only one can be selected.
#define MELEXIS
//#define MCP

extern const byte senSta; // sen/Sta output from Melexix TH3122.
extern const byte enable; // HIGH enables IBUS trasceiver chip.
extern volatile boolean clearToSend;
extern const byte ledPin;
extern unsigned long ibusLoopTime;
extern unsigned long packetTimer;

/*
const byte RAD1[1] = {0x10};
const byte RAD2[1] = {0x44};
const byte RAD3[1] = {0x45};
const byte RAD4[1] = {0x42};
const byte RAD5[1] = {0x43};
const byte RAD6[1] = {0x46};
const byte RAD7[1] = {0x41};

const byte MEN1[1] = {0x40};
const byte MEN2[1] = {0x41};
const byte MEN3[1] = {0x42};
const byte MEN4[1] = {0x43};
const byte MEN5[1] = {0x44};
const byte MEN6[1] = {0x45};
const byte MEN7[1] = {0x46};
const byte MEN8[1] = {0x47};
const byte MEN9[1] = {0x48};
const byte MEN10[1] = {0x49};*/

/*
68 LL 3B A5 62 01 41  // Main radio field 41, field size 8
68 LL 3B A5 62 01 42  // Main radio field 42, field size 7
68 LL 3B A5 62 01 43  // Main radio field 43, field size 11
68 LL 3B A5 62 01 44  // Main radio field 44, field size 7
68 LL 3B A5 62 01 45  // Main radio field 45, field size 11
68 LL 3B A5 62 01 06  // Main radio field 06, field size 18
//
68 LL 3B 21 60 00 40  // menu field 1, field size 20
68 LL 3B 21 60 00 41  // menu field 2, field size 20
68 LL 3B 21 60 00 42  // menu field 3, field size 20
68 LL 3B 21 60 00 43  // menu field 4, field size 20
68 LL 3B 21 60 00 44  // menu field 5, field size 20
//
68 LL 3B 21 60 00 45  // menu field 6, field size 20
68 LL 3B 21 60 00 46  // menu field 7, field size 20
68 LL 3B 21 60 00 47  // menu field 8, field size 20
68 LL 3B 21 60 00 48  // menu field 9, field size 20
68 LL 3B 21 60 00 49  // menu field 10, field size 20
*/
// 80 05 BF 18 08 0F 25 Speed 10mph

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// RAD display message header
//
const byte SL_HEADER [6] PROGMEM = { 0xC8 , 0x00 , 0x80 , 0x23 , 0x42 , 0x32 }; // Single line radio display header
//const byte SL_HEADER [7] PROGMEM = { 0x68 , 0x12 , 0x3B , 0x23 , 0x62 , 0x10 , 0x41 }; // Single line radio display header
//
// NAV display message headers
// 
/*
68 LL 3B A5 62 01 41  // Main radio field 41, field size 8
68 LL 3B A5 62 01 42  // Main radio field 42, field size 7
68 LL 3B A5 62 01 43  // Main radio field 43, field size 11
68 LL 3B A5 62 01 44  // Main radio field 44, field size 7
68 LL 3B A5 62 01 45  // Main radio field 45, field size 11
68 LL 3B A5 62 01 06  // Main radio field 06, field size 18
68 LL 3B A5 62 01 10  // Main radio field 06, field size ??
*/
//
const byte RAD1 [7] PROGMEM = { 0x06 , 0x68 , 0x00  , 0x3B  , 0xA5  , 0x62  , 0x01 }; //  radio field headers
const byte RAD2 [7] PROGMEM = { 0x06 , 0x68 , 0x00  , 0x3B  , 0x23  , 0x62 , 0x01  }; // Main radio text(AUX etc) header, field size 11
const byte RAD3 [6] PROGMEM = { 0x05 , 0x68 , 0x00  , 0x3B  , 0x23  , 0x62  }; // Main radio text(AUX etc) header, field size 11
const byte RAD  [7] PROGMEM = { 0x41 , 0x42 , 0x43 , 0x44 , 0x45 , 0x06 , 0x10  }; // Indidvidual radio fields
//
// Working
const byte MEN1 [7]  PROGMEM = { 0x06 , 0x68 , 0x00 , 0x3B , 0x21 , 0x60 , 0x00 }; // Main menu field header
const byte MEN  [10] PROGMEM = { 0x40 , 0x41 , 0x42 , 0x43 , 0x44 , 0x45 , 0x46 , 0x47 , 0x48 , 0x49 }; // Indidvidual menu fields
const byte MENP [10] PROGMEM = { 0x40 , 0x41 , 0x42 , 0x43 , 0x44 , 0x45 , 0x46 , 0x47 , 0x48 , 0x49 }; // Indidvidual menu fields - partial message
const byte MENE [10] PROGMEM = { 0x00 , 0x01 , 0x02 , 0x03 , 0x04 , 0x05 , 0x06 , 0x07 , 0x08 , 0x09 }; // Indidvidual menu fields - end message

//
// NAV display message body
//

const byte Menu_text_1 [19] PROGMEM = { 0x68 , 0x11 , 0x3B , 0x21 , 0x60 , 0x00 , 0x40 , 0x41 , 0x72 , 0x74 , 0x69 , 0x73 , 0x74 , 0x20 , 0x4E , 0x61 , 0x6D , 0x65 , 0x6D }; // F0="Artist Name"
const byte Menu_text_2 [18] PROGMEM = { 0x68 , 0x10 , 0x3B , 0x21 , 0x60 , 0x00 , 0x41 , 0x54 , 0x72 , 0x61 , 0x63 , 0x6B , 0x20 , 0x4E , 0x61 , 0x6D , 0x65 , 0x0B }; // F1="Track Name"
const byte Menu_text_3 [18] PROGMEM = { 0x68 , 0x10 , 0x3B , 0x21 , 0x60 , 0x00 , 0x42 , 0x41 , 0x6C , 0x62 , 0x75 , 0x6D , 0x20 , 0x4E , 0x61 , 0x6D , 0x65 , 0x10 }; // F2="Album Name"
//
const byte Menu_text_4 [14] PROGMEM = { 0x68 , 0x0C , 0x3B , 0x21 , 0x60 , 0x00 , 0x45 , 0x6D , 0x65 , 0x6E , 0x75 , 0x20 , 0x34 , 0x5C }; // F5="menu 4"
const byte Menu_text_5 [14] PROGMEM = { 0x68 , 0x0C , 0x3B , 0x21 , 0x60 , 0x00 , 0x46 , 0x6D , 0x65 , 0x6E , 0x75 , 0x20 , 0x35 , 0x5E }; // F6="menu 5"
const byte Menu_text_6 [14] PROGMEM = { 0x68 , 0x0C , 0x3B , 0x21 , 0x60 , 0x00 , 0x07 , 0x6D , 0x65 , 0x6E , 0x75 , 0x20 , 0x36 , 0x1C }; // F7="menu 6"
//
const byte Header_text_1 [13] PROGMEM = { 0x68 , 0x0B , 0x3B , 0xA5 , 0x62 , 0x01 , 0x41 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0xFF }; //Blank
const byte Header_text_2 [13] PROGMEM = { 0x68 , 0x0B , 0x3B , 0xA5 , 0x62 , 0x01 , 0x42 , 0x20 , 0x50 , 0x20 , 0x36 , 0x20 , 0x9A }; //p 6
const byte Header_text_3 [13] PROGMEM = { 0x68 , 0x0B , 0x3B , 0xA5 , 0x62 , 0x01 , 0x43 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0xFD }; //Blank ;
const byte Header_text_4 [13] PROGMEM = { 0x68 , 0x0B , 0x3B , 0xA5 , 0x62 , 0x01 , 0x44 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0xFA }; //Blank ;
const byte Header_text_5 [15] PROGMEM = { 0x68 , 0x0D , 0x3B , 0xA5 , 0x62 , 0x01 , 0x45 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0xFD }; //Blank
const byte Header_text_6 [28] PROGMEM = { 0x68 , 0x1A , 0x3B , 0xA5 , 0x62 , 0x01 , 0x46 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0xC9 }; //Blank
const byte Header_text_7 [28] PROGMEM = { 0x68 , 0x1A , 0x3B , 0xA5 , 0x62 , 0x01 , 0x07 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x88 }; //Blank
//
const char Menu_blank [] PROGMEM = {"               "};
const byte Menu_black_0 [23] PROGMEM = { 0x68, 0x15, 0x3B, 0x21, 0x60, 0x00, 0x40, 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20  , 0x67  }; // 40
const byte Menu_black_1 [23] PROGMEM = { 0x68, 0x15, 0x3B, 0x21, 0x60, 0x00, 0x41, 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20  , 0x66  }; // 41
const byte Menu_black_2 [23] PROGMEM = { 0x68, 0x15, 0x3B, 0x21, 0x60, 0x00, 0x42, 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20  , 0x65  }; // 42
const byte Menu_black_3 [23] PROGMEM = { 0x68, 0x15, 0x3B, 0x21, 0x60, 0x00, 0x43, 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20  , 0x64  }; // 43
const byte Menu_black_4 [23] PROGMEM = { 0x68, 0x15, 0x3B, 0x21, 0x60, 0x00, 0x44, 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20  , 0x63  }; // 44
const byte Menu_black_5 [23] PROGMEM = { 0x68, 0x15, 0x3B, 0x21, 0x60, 0x00, 0x45, 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20  , 0x62  }; // 45
const byte Menu_black_6 [23] PROGMEM = { 0x68, 0x15, 0x3B, 0x21, 0x60, 0x00, 0x46, 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20  , 0x61  }; // 46
const byte Menu_black_7 [23] PROGMEM = { 0x68, 0x15, 0x3B, 0x21, 0x60, 0x00, 0x47, 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20  , 0x60  }; // 47
const byte Menu_black_8 [23] PROGMEM = { 0x68, 0x15, 0x3B, 0x21, 0x60, 0x00, 0x48, 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20  , 0x6F  }; // 48
const byte Menu_black_9 [23] PROGMEM = { 0x68, 0x15, 0x3B, 0x21, 0x60, 0x00, 0x49, 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20  , 0x20 ,0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20  , 0x6E  }; // 49
//
// Nav screen display clear screen items
//
const byte CLS [6] PROGMEM = { 0x68 , 0x04 , 0x3B , 0x46 , 0x0C , 0x1D }; // >> Clear screen
const byte UPDATE [8] PROGMEM = { 0x68 , 0x06 , 0x3B , 0xA5, 0x62 , 0x01, 0x00, 0x93 }; // >> Clear screen

// Nav message responses
//

const byte Screen_Text_Receive_1 [7] = { 0x3B , 0x05 , 0x68 , 0x22 , 0x00 , 0x00 , 0x74 }; //1 Screen Text messages received
const byte Screen_Text_Receive_2 [7] = { 0x3B , 0x05 , 0x68 , 0x22 , 0x00 , 0x01 , 0x75 }; //2 Screen Text messages received
const byte Screen_Text_Receive_3 [7] = { 0x3B , 0x05 , 0x68 , 0x22 , 0x00 , 0x02 , 0x76 }; //3 Screen Text messages received
const byte Screen_Text_Receive_4 [7] = { 0x3B , 0x05 , 0x68 , 0x22 , 0x00 , 0x03 , 0x77 }; //4 Screen Text messages received
const byte Screen_Text_Receive_5 [7] = { 0x3B , 0x05 , 0x68 , 0x22 , 0x00 , 0x04 , 0x70 }; //5 Screen Text messages received
const byte Screen_Text_Receive_6 [7] = { 0x3B , 0x05 , 0x68 , 0x22 , 0x00 , 0x05 , 0x71 }; //6 Screen Text messages received
const byte Screen_Text_Receive_7 [7] = { 0x3B , 0x05 , 0x68 , 0x22 , 0x00 , 0x06 , 0x72 }; //7 Screen Text messages received

const byte Screen_Text_End_Message [8] PROGMEM = { 0x68 , 0x06 , 0x3B , 0xA5, 0x62 , 0x01, 0x00, 0x93 }; // Screen end text

const byte Menu_Text_Receive_1 [7] = { 0x3B , 0x05 , 0x68 , 0x22 , 0x00 , 0xFF , 0x8B }; //1 Menu Text messages received
const byte Menu_Text_Receive_2 [7] = { 0x3B , 0x05 , 0x68 , 0x22 , 0x01 , 0xFF , 0x8A }; //2 Menu Text messages received
const byte Menu_Text_Receive_3 [7] = { 0x3B , 0x05 , 0x68 , 0x22 , 0x02 , 0xFF , 0x89 }; //3 Menu Text messages received
const byte Menu_Text_Receive_4 [7] = { 0x3B , 0x05 , 0x68 , 0x22 , 0x03 , 0xFF , 0x88 }; //4 Menu Text messages received
const byte Menu_Text_Receive_5 [7] = { 0x3B , 0x05 , 0x68 , 0x22 , 0x04 , 0xFF , 0x8F }; //5 Menu Text messages received
const byte Menu_Text_Receive_6 [7] = { 0x3B , 0x05 , 0x68 , 0x22 , 0x05 , 0xFF , 0x8E }; //6 Menu Text messages received
const byte Menu_Text_Receive_7 [7] = { 0x3B , 0x05 , 0x68 , 0x22 , 0x06 , 0xFF , 0x8D }; //7 Menu Text messages received
const byte Menu_Text_Receive_8 [7] = { 0x3B , 0x05 , 0x68 , 0x22 , 0x07 , 0xFF , 0x8C }; //8 Menu Text messages received
const byte Menu_Text_Receive_9 [7] = { 0x3B , 0x05 , 0x68 , 0x22 , 0x08 , 0xFF , 0x83 }; //9 Menu Text messages received
const byte Menu_Text_Receive_10[7] = { 0x3B , 0x05 , 0x68 , 0x22 , 0x09 , 0xFF , 0x82 }; //10 Menu Text messages received

const byte Menu_Text_End_Message [8] PROGMEM = { 0x68 , 0x06 , 0x3B , 0xA5 , 0x60 , 0x01 , 0x00 , 0x91}; // Menu end text
 
//
//
// Misc diplay commands.
//
// Nav screen display items Main screen top
//                                

const byte AUX [20] PROGMEM = { 0x68 , 0x12 , 0x3B , 0x23 , 0x62 , 0x10 , 0x41 , 0x55 , 0x58 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x5C }; //  AUX 68 12 3B 23 62 10 41 55 58 20 20 20 20 20 20 20 20 20 20 5C
const byte AUX_MODE [20] PROGMEM = { 0x68 , 0x12 , 0x3B , 0x23 , 0x62 , 0x10 , 0x41 , 0x55 , 0x58 , 0x20 ,  0x4D , 0x6F , 0x64 , 0x65, 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x7F }; //  AUX Mode
//				 			 
const byte A2DP [15] PROGMEM = {0x68 , 0x0D , 0x3B , 0x23 , 0x62 , 0x10 , 0x42 , 0x54 , 0x20 , 0x41 , 0x32 , 0x44 , 0x50 , 0x20 , 0x7E}; // A2DP
const byte SETUP[18] PROGMEM = {0x68 , 0x10 , 0x3B , 0x21 , 0x60 , 0x00 , 0x40 , 0x2D , 0x20 , 0x53 , 0x65 , 0x74 , 0x75 , 0x70 , 0x20 , 0x2D , 0x06 , 0x03}; // SETUP
//
const byte Radio[12] PROGMEM = {0x68 , 0x0b , 0x3B , 0xa5 , 0x62 , 0x01 , 0x41 , 0x20 , 0x20 , 0x46 , 0x4d , 0x20}; // RAIDO
const byte TAPE[20] PROGMEM = {0x68 , 0x12 , 0x3B , 0x23 , 0x62 , 0x10 , 0x4E , 0x4f , 0x20 , 0x54 , 0x41 , 0x50 , 0x45 , 0x20 , 0x20 , 0x20 , 0x20, 0x20, 0x20 , 0x31}; // SETUP
//
// Now playing text
const byte Menu_text_NP [15] PROGMEM = { 0x2D, 0x20, 0x4E, 0x6F, 0x77, 0x20, 0x50, 0x6C, 0x61, 0x79, 0x69, 0x6E, 0x67, 0x20, 0x2D }; // F0="- Now Playing -"
//
const byte TV_IN_A [7] PROGMEM = { 0xED, 0x05, 0xF0, 0x4F, 0x11, 0x12, 0x54 }; // TV in
const byte TV_IN_B [7] PROGMEM = { 0xED, 0x05, 0xF0, 0x4F, 0x11, 0x11, 0x57 }; // TV in
const byte TV_IN_C [7] PROGMEM = { 0x3B, 0x05, 0x68, 0x4E, 0x01, 0x00, 0x19 }; // TV in
const byte TV_OUT [7] PROGMEM = { 0xED, 0x05, 0xF0, 0x4F, 0x12, 0x11, 0x54 }; // TV out
const byte TV_OUT_B [7] PROGMEM = { 0x3B, 0x05, 0xBB, 0x4F, 0x02, 0x00, 0xC8 }; // TV out
// Clears AUX screen menu lines
//
const byte Radio_display_text_1 [13] PROGMEM = { 0x68 , 0x0B , 0x3B , 0xA5 , 0x62 , 0x01 , 0x41 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0xFF }; //Blank
const byte Radio_display_text_2 [13] PROGMEM = { 0x68 , 0x0B , 0x3B , 0xA5 , 0x62 , 0x01 , 0x42 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0xFC }; //Blank
const byte Radio_display_text_3 [13] PROGMEM = { 0x68 , 0x0B , 0x3B , 0xA5 , 0x62 , 0x01 , 0x43 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0xFD }; //Blank ;
const byte Radio_display_text_4 [13] PROGMEM = { 0x68 , 0x0B , 0x3B , 0xA5 , 0x62 , 0x01 , 0x44 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0xFA }; //Blank ;
const byte Radio_display_text_5 [15] PROGMEM = { 0x68 , 0x0D , 0x3B , 0xA5 , 0x62 , 0x01 , 0x45 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0xFD }; //Blank
const byte Radio_display_text_6 [28] PROGMEM = { 0x68 , 0x1A , 0x3B , 0xA5 , 0x62 , 0x01 , 0x46 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0xC9 }; //Blank
//
// this \/ must be sent as its the end text command
const byte Screen_text_Radio_end [28] PROGMEM = { 0x68 , 0x1A , 0x3B , 0xA5 , 0x62 , 0x01 , 0x07 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x20 , 0x88 }; //Blank
const byte Screen_text_Radio_End_Close [8]  = { 0x68 , 0x06 , 0x3B , 0xA5 , 0x62 , 0x01 , 0x00 , 0x93}; // Radio end text
//
// NAV display message body close
//
const byte Screen_text_menu_End [8] PROGMEM = { 0x68 , 0x06 , 0x3B , 0xA5 , 0x60 , 0x01 , 0x00 , 0x91}; // end text
const byte Screen_text_menu_End_Close [9] PROGMEM = { 0x68 , 0x07 , 0x3B , 0xA5 , 0x60 , 0x01 , 0x00 , 0x00 , 0x90}; // end text
//
// IBUS message definitions. Add/Remove as needed.
//
const byte KEY_IN [7] PROGMEM = { 0x44 , 0x05 , 0xBF , 0x74 , 0x04 , 0x00 , 0x8E }; // Ignition key in
const byte KEY_OUT [7] PROGMEM = { 0x44 , 0x05 , 0xBF , 0x74 , 0x00 , 0xFF , 0x75 }; // Ignition key out
//
const byte IGNITION_OFF [6] PROGMEM = { 0x80 , 0x04 , 0xBF , 0x11 , 0x00 , 0x2A }; // Ignition Off
const byte IGNITION_POS1 [6] PROGMEM = { 0x80 , 0x04 , 0xBF , 0x11 , 0x01 , 0x2B }; // Ignition Acc position - POS1
const byte IGNITION_POS2 [6] PROGMEM = { 0x80 , 0x04 , 0xBF , 0x11 , 0x03 , 0x29 }; // Ignition On position - POS2
//
const byte REMOTE_UNLOCK [6] PROGMEM = { 0x00 , 0x04 , 0xBF , 0x72 , 0x22 , 0xEB }; // Remote control unlock
const byte REMOTE_LOCK [6] PROGMEM = {  0x00 , 0x04 , 0xBF , 0x72 , 0x12 , 0xDB }; // Remote control lock
const byte REMOTE_UNLOCK_BOOT [6] PROGMEM = {  0x00 , 0x04 , 0xBF , 0x72 , 0x42 , 0x8B }; // Remote Boot unlock
//
//const byte POWER_OFF [6] PROGMEM ={ 0x68 , 0x04 , 0xF0 , 0x4A , 0x00 , 0xD6 }; // Power off
//
const byte PDC_ON [6] PROGMEM = { 0x3F , 0x04 , 0x60 , 0x0C , 0x80 , 0xD7 }; // PDC On
const byte PDC_OFF [6] PROGMEM = { 0x3F , 0x04 , 0x60 , 0x0C , 0x40 , 0x17 }; // PDC Off
//
//
// Right side menu press 
const byte BT_Selected [8] PROGMEM = { 0x3B , 0x06 , 0x68 , 0x31 , 0x60 , 0x00 , 0x01 , 0x05 }; // menu knob BT 3B 06 68 31 60 00 01 05
const byte DAB_Selected [8] PROGMEM = { 0x3B , 0x06 , 0x68 , 0x31 , 0x60 , 0x00 , 0x02 , 0x06 }; // menu knob DAB
const byte AUX_In_Selected [8] PROGMEM = { 0x3B , 0x06 , 0x68 , 0x31 , 0x60 , 0x00 , 0x03 , 0x07 }; // menu knob AUX-In
const byte Main_Menu [8] PROGMEM = { 0x3B , 0x06 , 0x68 , 0x31 , 0x60 , 0x00 , 0x09 , 0x0D }; // menu knob Menu
const byte Main_Menu_Release [8] PROGMEM = { 0x3B , 0x06 , 0x68 , 0x31 , 0x60 , 0x00 , 0x49 , 0x4D }; // menu knob Menu relase
const byte Display_Toggle [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x30 , 0xE4 }; // display toggle
const byte Radio_display_off [6] PROGMEM = { 0x68 , 0x04 , 0x3b , 0x46 , 0x02 , 0x13 }; // display toggle
const byte display_off [6] PROGMEM = { 0x7f , 0x04 , 0x43 , 0xab , 0x21 , 0x2b }; // display toggle
//
// 
//  Nav Screen buttons
//
// Left Side
const byte ROTARY_VOL_UP [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x32 , 0x11 , 0xBF }; // knob Volume Up
const byte ROTARY_VOL_DOWN [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x32 , 0x10 , 0xBE }; // knob Volume Down
const byte ROTARY_VOL_PRESS [6] PROGMEM = { 0xF0 , 0x04 , 0x3B , 0x48 , 0x06 , 0xD2 }; // knob VOL press
const byte ROTARY_VOL_PRESS_REL [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x86 , 0x52 }; // knob Vol press
const byte ROTARY_VOL_PRESS_LONG [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x46 , 0x92 }; // knob Vol press long
//
const byte MODE [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x23 , 0xF7 }; // MODE
const byte MODE_REL [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0xA3 , 0x77 }; // MODE
//
const byte INFO [7] PROGMEM = { 0xF0 , 0x05 , 0xFF , 0x47 , 0x00 , 0x38 , 0x75 }; // INFO
const byte INFO_LONG [7] PROGMEM = { 0xF0 , 0x05 , 0xFF , 0x47 , 0x00 , 0x78 , 0x35 }; // INFO LONG
const byte INFO_RELEASE [7] PROGMEM = { 0xF0 , 0x05 , 0xFF , 0x47 , 0x00 , 0xB8 , 0xF5 }; // INFO RELEASE
//
const byte ONE [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x11 , 0xC5 }; // one
const byte TWO [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x01 , 0xD5 }; // two
const byte THREE [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x12 , 0xC6 }; // three
const byte FOUR [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x02 , 0xD6 }; // four
const byte FIVE [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x13 , 0xC7 }; // five
const byte SIX [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x03 , 0xD7 }; // six
//
const byte BUTTON1[7] = { 0x68 , 0x05 , 0x18 , 0x38 , 0x06 , 0x01 , 0x4A }; // Radio Button1
const byte BUTTON2[7] = { 0x68 , 0x05 , 0x18 , 0x38 , 0x06 , 0x02 , 0x49 }; // Radio Button2
const byte BUTTON3[7] = { 0x68 , 0x05 , 0x18 , 0x38 , 0x06 , 0x03 , 0x48 }; // Radio Button3
const byte BUTTON4[7] = { 0x68 , 0x05 , 0x18 , 0x38 , 0x06 , 0x04 , 0x4F }; // Radio Button4
const byte BUTTON5[7] = { 0x68 , 0x05 , 0x18 , 0x38 , 0x06 , 0x05 , 0x4E }; // Radio Button5
const byte BUTTON6[7] = { 0x68 , 0x05 , 0x18 , 0x38 , 0x06 , 0x06 , 0x4D }; // Radio Button6
//
const byte ONE_REL [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x91 , 0x45 };
const byte TWO_REL [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x81 , 0x55 };
const byte THREE_REL [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x92 , 0x46 };
const byte FOUR_REL [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x82 , 0x56 };
const byte FIVE_REL [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x93 , 0x47 };
const byte SIX_REL [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x83 , 0x57 };
//
// Right side
const byte ROTARY_MENU_CW [6] PROGMEM = { 0xF0 , 0x04 , 0x3B , 0x49 , 0x81 , 0x07 }; // menu knob cw turn F0 04 3B 49 81 07
const byte ROTARY_MENU_CCW [6] PROGMEM = { 0xF0 , 0x04 , 0x3B , 0x49 , 0x01 , 0x87 }; // menu knob cw turn F0 04 3B 49 01 87
const byte ROTARY_MENU_PRESS [6] PROGMEM = { 0xF0 , 0x04 , 0x3B , 0x48 , 0x05 , 0x82 }; // menu knob press
const byte ROTARY_MENU_PRESS_REL [6] PROGMEM = { 0xF0 , 0x04 , 0x3B , 0x48 , 0x05 , 0x82 }; // menu knob press
const byte ROTARY_MENU_PRESS_LONG [6] PROGMEM = { 0xF0 , 0x04 , 0x3B , 0x48 , 0x45 , 0xC2 }; // menu knob press long
//
const byte MENU [6] PROGMEM = { 0xF0 , 0x04 , 0xFF , 0x48 , 0xB4 , 0xF7 }; // menu
const byte FWD [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x00 , 0xD4 }; // >> FWD
const byte REV [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x10 , 0xC4 }; // << REV
const byte CLOCK [6] PROGMEM = { 0xF0 , 0x04 , 0xFF , 0x48 , 0x07 , 0x44 }; // clock
const byte TAPE_DIR [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x14 , 0xC0 }; // tape rev
const byte TAPE_DIR_LONG [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x54 , 0x80 }; // tape rev long F0 04 68 48 54 80
const byte SEL [7] PROGMEM = { 0xF0 , 0x05 , 0xFF , 0x47 , 0x00 , 0x0F , 0x42 }; // sel
const byte TONE [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x04 , 0xD0 }; // TONE
//
const byte MENU_REL [6] PROGMEM = { 0xF0 , 0x04 , 0xFF , 0x48 , 0xB4 , 0xF7 }; // menu release
const byte FWD_REL [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x80 , 0x54 }; // >> FWD release
const byte REV_REL [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x90 , 0x44 }; // << REV release
const byte CLOCK_REL [6] PROGMEM = { 0xF0 , 0x04 , 0xFF , 0x48 , 0x87 , 0xC4 }; // clock release
const byte TAPE_DIR_REL [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x94 , 0x40 }; // tape rev release
const byte SEL_REL [7] PROGMEM = { 0xF0 , 0x05 , 0xFF , 0x47 , 0x00 , 0x8F , 0xC2 }; // sel release
const byte TONE_REL [6] PROGMEM = { 0xF0 , 0x04 , 0x68 , 0x48 , 0x84 , 0x50 }; // TONE release
//
///////////////////////////////////////////////////////////////////////////////////////////////////////
//
const byte MFL_VOL_UP [6] PROGMEM = { 0x50 , 0x04 , 0x68 , 0x32, 0x11 , 0x1F }; // Steering wheel Volume Up
const byte MFL_VOL_DOWN [6] PROGMEM = { 0x50 , 0x04 , 0x68 , 0x32, 0x10 , 0x1E }; // Steering wheel Volume Down
const byte MFL_SEARCH_UP [6] PROGMEM = { 0x50 , 0x04 , 0x68 , 0x3B, 0x01 , 0x06 }; // Steering wheel Search Up
const byte MFL_SEARCH_DOWN [6] PROGMEM = { 0x50 , 0x04 , 0x68 , 0x3B, 0x08 , 0x0F }; // Steering wheel Search Down
const byte MFL_TEL_VOL_UP [6] PROGMEM = { 0x50 , 0x04 , 0xC8 , 0x32, 0x11 , 0xBF }; // Steering wheel Volume Up - Telephone
const byte MFL_TEL_VOL_DOWN [6] PROGMEM = { 0x50 , 0x04 , 0xC8 , 0x32, 0x10 , 0xBE }; // Steering wheel Volume Down - Telephone
const byte MFL_SES_PRESS [6] PROGMEM = { 0x50 , 0x04 , 0xB0 , 0x3B, 0x80 , 0x5F }; // Steering wheel press and hold phone button
const byte MFL_SEND_END_PRESS [6] PROGMEM = { 0x50 , 0x04 , 0xC8 , 0x3B, 0x80 , 0x27 }; // Steering wheel send/end press
const byte MFL_RT_PRESS [6] PROGMEM = { 0x50 , 0x04 , 0x68 , 0x3B , 0x02, 0x05 }; // MFL R/T press
//
const byte BUTTON_PRESSED [6] PROGMEM = { 0x68 , 0x04 , 0xFF , 0x3B ,  0x00 , 0xA8 }; // Radio/Telephone control, No_buttons_pressed
const byte INCOMING_CALL [6] PROGMEM = { 0xC8 , 0x04 , 0xE7 , 0x2C , 0x05 , 0x02 }; // Incoming phone call
const byte PHONE_ON [6] PROGMEM = { 0xC8 , 0x04 , 0xE7 , 0x2C , 0x10 , 0x17 }; // Phone On
const byte HANDSFREE_PHONE_ON [6] PROGMEM = { 0xC8 , 0x04 , 0xE7 , 0x2C , 0x11 , 0x16 }; // Hands Free Phone On
const byte ACTIVE_CALL [6] PROGMEM = { 0xC8 , 0x04 , 0xE7 , 0x2C , 0x33 , 0x34 }; // Active phone call
//
const byte GO_TO_RADIO [6] PROGMEM = { 0x68 , 0x04 , 0xFF , 0x3B, 0x00 , 0xA8 }; // Go  to radio - I think
const byte REQUEST_TIME [7] PROGMEM = { 0x68 , 0x05 , 0x80 , 0x41, 0x01 , 0x01 , 0xAC}; // Request current time from IKE
const byte CLOWN_FLASH [7] PROGMEM = { 0x3F , 0x05 , 0x00 , 0x0C , 0x4E , 0x01 , 0x79 }; // Turn on clown nose for 3 seconds
const byte BACK_ONE [7] PROGMEM = { 0x68 , 0x05 , 0x18 , 0x38 , 0x08 , 0x00 , 0x45 }; // Back
const byte BACK_TWO [7] PROGMEM = { 0x68 , 0x05 , 0x18 , 0x38 , 0x08 , 0x01 , 0x44 }; // Back
const byte SELECT [7] PROGMEM = { 0x68 , 0x05 , 0x18 , 0x38 , 0x07 , 0x01 , 0x4B }; // Select
//
const byte DSP_STATUS_REQUEST [5] PROGMEM = { 0x68 , 0x03 , 0x6A , 0x01 , 0x00 }; // DSP status request
const byte DSP_STATUS_REPLY [6] PROGMEM = { 0x6A , 0x04 , 0xFF , 0x02 , 0x00 , 0x93 }; // DSP status reply
const byte DSP_STATUS_REPLY_RST [6] PROGMEM = { 0x6A , 0x04 , 0xFF , 0x02 , 0x01 , 0x92 }; // DSP status ready after reset to LOC
const byte DSP_VOL_UP_1 [6] PROGMEM = { 0x68 , 0x04 , 0x6A , 0x32, 0x11 , 0x25 }; // Rotary Volume Up 1 step
const byte DSP_VOL_UP_2 [6] PROGMEM = { 0x68 , 0x04 , 0x6A , 0x32, 0x21 , 0x15 }; // Rotary Volume Up 2 step
const byte DSP_VOL_UP_3 [6] PROGMEM = { 0x68 , 0x04 , 0x6A , 0x32, 0x31 , 0x05 }; // Rotary Volume Up 3 step
const byte DSP_VOL_DOWN_1 [6] PROGMEM = { 0x68 , 0x04 , 0x6A , 0x32, 0x10 , 0x24 }; // Rotary Volume Down 1 step
const byte DSP_VOL_DOWN_2 [6] PROGMEM = { 0x68 , 0x04 , 0x6A , 0x32, 0x20 , 0x14 }; // Rotary Volume Down 2 step
const byte DSP_VOL_DOWN_3 [6] PROGMEM = { 0x68 , 0x04 , 0x6A , 0x32, 0x30 , 0x04 }; // Rotary Volume Down 3 step
const byte DSP_FUNC_0 [6] PROGMEM = { 0x68 , 0x04 , 0x6A , 0x36, 0x30 , 0x00 }; // DSP_Function 0
const byte DSP_FUNC_1 [6] PROGMEM = { 0x68 , 0x04 , 0x6A , 0x36, 0xE1 , 0xD1 }; // DSP_Function 1
const byte DSP_FUNC_2 [6] PROGMEM = { 0x68 , 0x04 , 0x6A , 0x36, 0xE2 , 0xD2 }; // DSP_Function 2
const byte DSP_SRCE_OFF [6] PROGMEM = { 0x68 , 0x04 , 0x6A , 0x36, 0xAF , 0x9F }; // DSP Source = OFF
const byte DSP_SRCE_CD [6] PROGMEM = { 0x68 , 0x04 , 0x6A , 0x36, 0xA0 , 0x90 }; // DSP Source = CD
const byte DSP_SRCE_TUNER [6] PROGMEM = { 0x68 , 0x04 , 0x6A , 0x36, 0xA1 , 0x91 }; // DSP Source = Tuner
//
const byte CD_STOP [7] PROGMEM = { 0x68 , 0x05 , 0x18 , 0x38 , 0x01 , 0x00 , 0x4C }; // CD Stop command
const byte CD_PLAY [7] PROGMEM = { 0x68 , 0x05 , 0x18 , 0x38 , 0x03 , 0x00 , 0x4E }; // CD Play command
const byte CD_PAUSE [7] PROGMEM = { 0x68 , 0x05 , 0x18 , 0x38 , 0x02 , 0x00 , 0x4F }; // CD Pause command
const byte CD_STOP_STATUS [12] PROGMEM = { 0x18 , 0x0A , 0x68 , 0x39 , 0x00 , 0x02 , 0x00 ,  0x3F , 0x00 , 0x07 , 0x01 , 0x78 }; // CD stop request
const byte CD_PLAY_STATUS [12] PROGMEM = { 0x18 , 0x0A , 0x68 , 0x39 , 0x02 , 0x09 , 0x00 ,  0x3F , 0x00 , 0x07 , 0x01 , 0x71 }; // CD play request
const byte CD_PLAY_REPLY [16] PROGMEM = { 0x18 , 0x0E , 0x68 , 0x39 , 0x02 , 0x89 , 0x00 ,  0x3F , 0x00 , 0x07 , 0x01 , 0x00 , 0x01 , 0x01 , 0x01 , 0xF4 }; // CD play reply
const byte CD_PAUSE_REPLY [16] PROGMEM = { 0x18 , 0x0E , 0x68 , 0x39 , 0x01 , 0x8C , 0x00 ,  0x3F , 0x00 , 0x07 , 0x01 , 0x00 , 0x01 , 0x01 , 0x01 , 0xF2 }; // CD pause reply
const byte CD_STOP_REPLY [16] PROGMEM = { 0x18 , 0x0E , 0x68 , 0x39 , 0x00 , 0x82 , 0x00 ,  0x3F , 0x00 , 0x07 , 0x01 , 0x00 , 0x01 , 0x01 , 0x01 , 0xFD }; // CD stop reply
//
const byte CD_STATUS [16] PROGMEM = { 0x18 , 0x0E , 0x68 , 0x39 , 0x00 , 0x82 , 0x00 , 0x3F , 0x00 , 0x07 , 0x00 , 0x00 , 0x01 , 0x01 , 0x01 , 0xFC }; // CD status
const byte CDC_LEFT [7] PROGMEM = { 0x68 , 0x05 , 0x18 , 0x38 , 0x0A , 0x01 , 0x46 }; // CDC Left short press
const byte CDC_LEFT_LONG [7] PROGMEM = { 0x68 , 0x05 , 0x18 , 0x38 , 0x04 , 0x00 , 0x49 }; // CDC Left long press
const byte CDC_RIGHT [7] PROGMEM = { 0x68 , 0x05 , 0x18 , 0x38 , 0x0A , 0x00 , 0x47 }; // CDC Right short press
const byte CDC_RIGHT_LONG [7] PROGMEM = { 0x68 , 0x05 , 0x18 , 0x38 , 0x04 , 0x01 , 0x48 }; // CDC Right long press
const byte CDC_BUTTON_ONE [7] PROGMEM = { 0x68 , 0x05 , 0x18 , 0x38 , 0x06 , 0x01 , 0x4A }; // CDC Button 1
const byte CDC_BUTTON_TWO [7] PROGMEM = { 0x68 , 0x05 , 0x18 , 0x38 , 0x06 , 0x02 , 0x49 }; // CDC Button 2
const byte CDC_BUTTON_THREE [7] PROGMEM = { 0x68 , 0x05 , 0x18 , 0x38 , 0x06 , 0x03 , 0x48 }; // CDC Button 3
const byte CDC_BUTTON_FOUR [7] PROGMEM = { 0x68 , 0x05 , 0x18 , 0x38 , 0x06 , 0x04 , 0x4F }; // CDC Button 4
const byte CDC_BUTTON_FIVE [7] PROGMEM = { 0x68 , 0x05 , 0x18 , 0x38 , 0x06 , 0x05 , 0x4E }; // CDC Button 5
const byte CDC_BUTTON_SIX [7] PROGMEM = { 0x68 , 0x05 , 0x18 , 0x38 , 0x06 , 0x06 , 0x4D }; // CDC Button 6
const byte CDC_STATUS_REPLY_RST [6] PROGMEM = { 0x18 , 0x04 , 0xFF , 0x02 , 0x01 , 0xE0 }; // CDC status ready after reset to LOC
const byte CDC_STATUS_REPLY [6] PROGMEM = { 0x18 , 0x04 , 0xFF , 0x02 , 0x00 , 0xE1 }; // CDC status reply
const byte CDC_STATUS_REQUEST [5] PROGMEM = { 0x68 , 0x03 , 0x18 , 0x01 , 0x72 }; // CDC status request
//
const byte RT_PRESS [6] PROGMEM = { 0x50 , 0x04 , 0xFF , 0x3B , 0x40 , 0xD0 }; // MFL R/T press - activate SIRI
const byte SDRS_STATUS_REPLY_RST [6] PROGMEM = { 0x73 , 0x04 , 0x68 , 0x02 , 0x01 , 0x1C }; // SDRS (Sirius) status ready after reset to LOC
const byte SDRS_STATUS_REPLY [6] PROGMEM = { 0x73 , 0x04 , 0x68 , 0x02 , 0x00 , 0x1D }; // SDRS status request
const byte SDRS_STATUS_REQUEST [5] PROGMEM = { 0x68 , 0x03 , 0x73 , 0x01 , 0x19 }; // SDRS status request
//
const byte SIRIUS_LEFT [7] PROGMEM = { 0x68 , 0x05 , 0x73 , 0x3D , 0x03 , 0x00 , 0x20 }; // SDRS Left short press
const byte SIRIUS_LEFT_LONG [7] PROGMEM = { 0x68 , 0x05 , 0x73 , 0x3D , 0x06 , 0x00 , 0x25 }; // SDRS Left long press
const byte SIRIUS_RIGHT [7] PROGMEM = { 0x68 , 0x05 , 0x73 , 0x3D , 0x04 , 0x00 , 0x27 }; // SDRS Right short press
const byte SIRIUS_RIGHT_LONG [7] PROGMEM = {  0x68 , 0x05 , 0x73 , 0x3D , 0x05 , 0x00 , 0x26 }; // SDRS Right long press
const byte SIRIUS_BUTTON_ONE [7] PROGMEM = {  0x68 , 0x05 , 0x73 , 0x3D , 0x08 , 0x01 , 0x2A }; // SDRS Button 1
const byte SIRIUS_BUTTON_TWO [7] PROGMEM = {  0x68 , 0x05 , 0x73 , 0x3D , 0x08 , 0x02 , 0x29 }; // SDRS Button 2
const byte SIRIUS_BUTTON_THREE [7] PROGMEM = {  0x68 , 0x05 , 0x73 , 0x3D , 0x08 , 0x03 , 0x28 }; // SDRS Button 3
const byte SIRIUS_BUTTON_FOUR [7] PROGMEM = {  0x68 , 0x05 , 0x73 , 0x3D , 0x08 , 0x04 , 0x2F }; // SDRS Button 4
const byte SIRIUS_BUTTON_FIVE [7] PROGMEM = {  0x68 , 0x05 , 0x73 , 0x3D , 0x08 , 0x05 , 0x2E }; // SDRS Button 5
const byte SIRIUS_BUTTON_SIX [7] PROGMEM = {  0x68 , 0x05 , 0x73 , 0x3D , 0x08 , 0x06 , 0x2D }; // SDRS Button 6
const byte SIRIUS_OFF [7] PROGMEM = {  0x68 , 0x05 , 0x73 , 0x3D , 0x01 , 0x00 , 0x22 }; // press MODE to leave Sirius mode
const byte SIRIUS_ON [7] PROGMEM = {   0x68 , 0x05 , 0x73 , 0x3D , 0x02 , 0x00 , 0x21 }; // press MODE to enter Sirius mode
//
const byte VOL_INCREMENT [64] PROGMEM = {
  0,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
  128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
  178,180,182,184,186,188,190,192}; // Volume increments

#endif
